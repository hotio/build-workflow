name: build-on-call

on:
  workflow_call:

jobs:

  check:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Shellcheck
        run: |
          for file in $(find ./root/etc -type f -name "run*"); do
            echo "Checking: $file"
            shellcheck "$file"
          done

  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        architecture: [linux-arm64, linux-amd64]
    needs: [check]
    outputs:
      version: ${{ steps.prep.outputs.version }}
      branch: ${{ steps.prep.outputs.branch }}
      changelog: ${{ steps.prep.outputs.changelog }}
      package-version: ${{ steps.prep.outputs.package-version }}
      artifact-url: ${{ steps.artifact.outputs.artifact-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if architecture exists
        id: arch-exists
        run: |
          (test -f ${{ matrix.architecture }}.Dockerfile && echo "result=passed" >> $GITHUB_OUTPUT) || echo "result=failed" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        if: contains(steps.arch-exists.outputs.result, 'passed')
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: contains(steps.arch-exists.outputs.result, 'passed')
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:v0.10.6

      - name: Login to docker.io
        if: contains(steps.arch-exists.outputs.result, 'passed')
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to ghcr.io
        if: contains(steps.arch-exists.outputs.result, 'passed')
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare
        if: contains(steps.arch-exists.outputs.result, 'passed')
        id: prep
        env:
          TAG: ${{ github.ref_name }}
          ARCHITECTURE: ${{ matrix.architecture }}
          REPO_OWNER: ${{ github.repository_owner }}
        run: |
          echo "changelog=$(jq -r '.changelog' < VERSION.json)" >> $GITHUB_OUTPUT
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "title=${GITHUB_REPOSITORY}:${TAG}" >> $GITHUB_OUTPUT
          echo "revision=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "source=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/tree/${TAG}" >> $GITHUB_OUTPUT
          echo "vendor=${REPO_OWNER}" >> $GITHUB_OUTPUT
          echo "url=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/blob/master/README.md" >> $GITHUB_OUTPUT
          echo "platform=${ARCHITECTURE//-/\/}" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REPOSITORY}:${TAG}-${GITHUB_SHA:0:7}-${GITHUB_RUN_NUMBER}-${ARCHITECTURE}" >> $GITHUB_OUTPUT
          VERSION=$(jq -r '.version // empty' < VERSION.json)
          if [[ -z ${VERSION} ]]; then
            VERSION=$(date --utc --date=@$(git show -s --format=%ct $(git rev-parse --short HEAD)) +'%Y%m%d%H%M%S')
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          BRANCH=$(jq -r '.branch // empty' < VERSION.json)
          if [[ -n ${BRANCH} ]]; then
            echo "branch=-${BRANCH}" >> $GITHUB_OUTPUT
          fi
          echo 'build-args<<EOF' >> $GITHUB_OUTPUT
          jq -r 'to_entries[] | [(.key | ascii_upcase),.value] | join("=")' < VERSION.json >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          echo "package-version=${TAG}-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
          echo "image-stats=$(jq '.app = "'"${GITHUB_REPOSITORY/${REPO_OWNER}\//}"'" | .image = "'"${GITHUB_REPOSITORY}:${TAG}"'" | .revision = "'"${GITHUB_SHA:0:7}"'" | .version = "'"${VERSION}"'"' <<< "{}" | base64 -w 0)" >> $GITHUB_OUTPUT

      - name: Build and push - Attempt 1
        continue-on-error: true
        if: contains(steps.arch-exists.outputs.result, 'passed')
        id: build_attempt1
        uses: docker/build-push-action@v5
        with:
          push: true
          platforms: ${{ steps.prep.outputs.platform }}
          file: ./${{ matrix.architecture }}.Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            docker.io/${{ steps.prep.outputs.tag }}
            ghcr.io/${{ steps.prep.outputs.tag }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.title=${{ steps.prep.outputs.title }}
            org.opencontainers.image.revision=${{ steps.prep.outputs.revision }}
            org.opencontainers.image.source=${{ steps.prep.outputs.source }}
            org.opencontainers.image.vendor=${{ steps.prep.outputs.vendor }}
            org.opencontainers.image.url=${{ steps.prep.outputs.url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          build-args: |
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
            BUILD_ARCHITECTURE=${{ matrix.architecture }}
            PACKAGE_VERSION=${{ steps.prep.outputs.package-version }}
            IMAGE_STATS=${{ steps.prep.outputs.image-stats }}
            ${{ steps.prep.outputs.build-args }}

      - name: Sleep
        if: (steps.build_attempt1.outcome == 'failure')
        run: |
          sleep 30

      - name: Build and push - Attempt 2
        if: (steps.build_attempt1.outcome == 'failure')
        uses: docker/build-push-action@v5
        with:
          push: true
          platforms: ${{ steps.prep.outputs.platform }}
          file: ./${{ matrix.architecture }}.Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            docker.io/${{ steps.prep.outputs.tag }}
            ghcr.io/${{ steps.prep.outputs.tag }}
          labels: |
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.title=${{ steps.prep.outputs.title }}
            org.opencontainers.image.revision=${{ steps.prep.outputs.revision }}
            org.opencontainers.image.source=${{ steps.prep.outputs.source }}
            org.opencontainers.image.vendor=${{ steps.prep.outputs.vendor }}
            org.opencontainers.image.url=${{ steps.prep.outputs.url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          build-args: |
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
            BUILD_ARCHITECTURE=${{ matrix.architecture }}
            PACKAGE_VERSION=${{ steps.prep.outputs.package-version }}
            IMAGE_STATS=${{ steps.prep.outputs.image-stats }}
            ${{ steps.prep.outputs.build-args }}

      - name: Get installed packages
        if: |
          contains(steps.arch-exists.outputs.result, 'passed')
        run: |
          version_json=$(cat ./VERSION.json)
          upstream_tag=$(jq -r '.upstream_tag' <<< "${version_json}")
          upstream_image=$(jq -r '.upstream_image' <<< "${version_json}")
          if [[ ${upstream_tag} == alpine* || ${upstream_image} == alpine* ]]; then
            docker run --rm --entrypoint="" "ghcr.io/${{ steps.prep.outputs.tag }}" apk -vv info | sort > "${{ steps.prep.outputs.package-version }}-packages.log" 2>&1
          else
            docker run --rm --entrypoint="" "ghcr.io/${{ steps.prep.outputs.tag }}" apt list --installed > "${{ steps.prep.outputs.package-version }}-packages.log" 2>&1
          fi

      - name: Check if we should do a test
        if: |
          contains(steps.arch-exists.outputs.result, 'passed') &&
          contains(matrix.architecture, 'amd64')
        id: check-for-test
        run: |
          version_json=$(cat ./VERSION.json)
          test_url=$(jq -r '.test_url' <<< "${version_json}")
          if [[ ${test_url} != null ]]; then
            echo "url=${test_url}" >> $GITHUB_OUTPUT
            echo "result=passed" >> $GITHUB_OUTPUT
          else
            echo "result=failed" >> $GITHUB_OUTPUT
          fi

      - name: Run the actual test
        if: |
          contains(steps.arch-exists.outputs.result, 'passed') &&
          contains(steps.check-for-test.outputs.result, 'passed') &&
          contains(matrix.architecture, 'amd64')
        run: |
          test_url=${{ steps.check-for-test.outputs.url }}
          docker run --network host -d --name service "ghcr.io/${{ steps.prep.outputs.tag }}"
          currenttime=$(date +%s); maxtime=$((currenttime+120)); while (! curl -fsSL -m 10 -b /dev/shm/cookie "${test_url}" > /dev/null) && [[ "$currenttime" -lt "$maxtime" ]]; do sleep 1; currenttime=$(date +%s); done
          if curl -fsSL -m 10 -b /dev/shm/cookie "${test_url}" > /dev/null; then
            docker logs service > "${{ steps.prep.outputs.package-version }}-test.log" 2>&1
            exit 0
          else
            docker logs service > "${{ steps.prep.outputs.package-version }}-test.log" 2>&1
            exit 1
          fi

      - name: Take screenshot
        continue-on-error: true
        id: screenshot
        if: |
          contains(steps.arch-exists.outputs.result, 'passed') &&
          contains(steps.check-for-test.outputs.result, 'passed') &&
          contains(matrix.architecture, 'amd64')
        uses: swinton/screenshot-website@main
        with:
          source: ${{ steps.check-for-test.outputs.url }}
          destination: ${{ steps.prep.outputs.package-version }}-screenshot.png
          delay: 5

      - name: Delete obsolete artifact
        continue-on-error: true
        if: |
          contains(steps.arch-exists.outputs.result, 'passed') &&
          contains(steps.check-for-test.outputs.result, 'passed') &&
          contains(matrix.architecture, 'amd64')
        uses: joutvhu/delete-artifact@v2
        with:
          name: ${{ steps.prep.outputs.package-version }}-screenshot

      - name: Copy screenshot
        continue-on-error: true
        if: |
          contains(steps.arch-exists.outputs.result, 'passed') &&
          contains(steps.check-for-test.outputs.result, 'passed') &&
          contains(matrix.architecture, 'amd64')
        run: cp ${{ steps.screenshot.outputs.path }} ${{ github.workspace }}/${{ steps.prep.outputs.package-version }}-screenshot.png

      - name: Upload results
        continue-on-error: true
        id: artifact
        if: |
          contains(steps.arch-exists.outputs.result, 'passed')
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: warn
          name: ${{ steps.prep.outputs.package-version }}-results-${{ matrix.architecture }}
          path: |
            ${{ steps.prep.outputs.package-version }}-*.*

  publish:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        registry: [docker.io, ghcr.io]
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to docker.io
        if: matrix.registry == 'docker.io'
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to ghcr.io
        if: matrix.registry == 'ghcr.io'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifests
        uses: nick-fields/retry@v3
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
          IMAGE: ${{ matrix.registry }}/${{ github.repository }}
          TAG: ${{ github.ref_name }}
          VERSION: ${{ needs.build.outputs.version }}
          BRANCH: ${{ needs.build.outputs.branch }}
        with:
          max_attempts: 3
          timeout_minutes: 5
          retry_wait_seconds: 30
          command: |
            SOURCE=${{ env.IMAGE }}:${{ env.TAG }}-${GITHUB_SHA:0:7}-${{ github.run_number }}
            [[ -f linux-amd64.Dockerfile ]]  && AMD64=${SOURCE}-linux-amd64
            [[ -f linux-arm64.Dockerfile ]]  && ARM64=${SOURCE}-linux-arm64
            docker manifest create ${IMAGE}:${TAG}${BRANCH} ${AMD64} ${ARM64}
            docker manifest push   ${IMAGE}:${TAG}${BRANCH}
            docker manifest create ${IMAGE}:${TAG}${BRANCH}-${VERSION//\~/-} ${AMD64} ${ARM64}
            docker manifest push   ${IMAGE}:${TAG}${BRANCH}-${VERSION//\~/-}
            docker manifest create ${IMAGE}:${TAG}-${GITHUB_SHA:0:7} ${AMD64} ${ARM64}
            docker manifest push   ${IMAGE}:${TAG}-${GITHUB_SHA:0:7}
            IS_LATEST=$(jq -r '.latest // empty' < VERSION.json)
            if [[ ${IS_LATEST} == true ]]; then
              docker manifest create ${IMAGE}:latest ${AMD64} ${ARM64}
              docker manifest push   ${IMAGE}:latest
            fi
          on_retry_command: |
            docker manifest rm     ${IMAGE}:${TAG}${BRANCH} || true
            docker manifest rm     ${IMAGE}:${TAG}${BRANCH}-${VERSION//\~/-} || true
            docker manifest rm     ${IMAGE}:${TAG}-${GITHUB_SHA:0:7} || true
            IS_LATEST=$(jq -r '.latest // empty' < VERSION.json)
            if [[ ${IS_LATEST} == true ]]; then
              docker manifest rm     ${IMAGE}:latest || true
            fi

  tags:
    runs-on: ubuntu-22.04
    needs: [build, publish]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Git Config
        env:
          GITHUB_OWNER: ${{ github.repository_owner }}
        run: |
          git config --global user.email "${GITHUB_OWNER}@users.noreply.github.com"
          git config --global user.name "${GITHUB_OWNER}"

      - name: Update tags .json file
        uses: nick-fields/retry@v3
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
          REPO: ${{ github.repository }}
          TAG: ${{ github.ref_name }}
          VERSION: ${{ needs.build.outputs.version }}
          BRANCH: ${{ needs.build.outputs.branch }}
        with:
          max_attempts: 3
          timeout_minutes: 5
          retry_wait_seconds: 30
          command: |
            TAGS="${TAG}${BRANCH},${TAG}${BRANCH}-${VERSION//\~/-},${TAG}${BRANCH}-${GITHUB_SHA:0:7}"
            LAST_UPDATED=$(date -u +'%FT%T.%3NZ')
            IS_LATEST=$(jq -r '.latest // false' < VERSION.json)
            DESCRIPTION=$(jq -r '.description // empty' < VERSION.json)
            HIDE=$(jq -r '.hide // false' < VERSION.json)
            git clone -b "master" "https://${GITHUB_TOKEN}@github.com/${REPO}.git" masterGit
            cd "${GITHUB_WORKSPACE}/masterGit" || exit 1
            if [[ ${HIDE} != true ]]; then
              [[ ! -f tags.json ]] && echo "{}" > tags.json
              tags_json=$(cat ./tags.json)
              jq '.'"${TAG}"'.tags[0] = "'"${TAG}${BRANCH}"'" | .'"${TAG}"'.tags[1] = "'"${TAG}${BRANCH}"'-'"${VERSION//\~/-}"'" | .'"${TAG}"'.tags[2] = "'"${TAG}${BRANCH}"'-'"${GITHUB_SHA:0:7}"'" | .'"${TAG}"'.last_updated = "'"${LAST_UPDATED}"'" | .'"${TAG}"'.latest = '"${IS_LATEST}"' | .'"${TAG}"'.description = "'"${DESCRIPTION}"'"' <<< "${tags_json}" | jq --sort-keys > tags.json
            fi
            git add .
            if git commit -m "Update tags.json [skip ci]"; then
              git push
            fi
            cd "${GITHUB_WORKSPACE}" || exit 1
            rm -rf "${GITHUB_WORKSPACE:?}/masterGit"

  notify:
    runs-on: ubuntu-22.04
    if: always()
    needs: [build, publish]
    steps:
      - name: Download results
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.package-version }}-results-linux-amd64

      - name: Send discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          TAG: ${{ github.ref_name }}
          VERSION: ${{ needs.build.outputs.version }}
          BRANCH: ${{ needs.build.outputs.branch }}
          PACKAGE_VERSION: ${{ needs.build.outputs.package-version }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          CHANGELOG: ${{ needs.build.outputs.changelog }}
          STATUS: ${{ needs.publish.result }}
          ARTIFACT_URL: ${{ needs.build.outputs.artifact-url }}
        shell: bash
        run: |
          if [[ "${STATUS}" == "success" ]]; then
            COLOR="3066993"
          else
            MENTION='"content": "<@269648028502196224>",'
          fi
          if [[ ${CHANGELOG} != null ]]; then
            VERSION="[${VERSION:----}](${CHANGELOG})"
          fi
          if [[ ${ARTIFACT_URL} != "" ]]; then
            ARTIFACT_URL="[${PACKAGE_VERSION:----}-results](${ARTIFACT_URL})"
          fi
          if [[ -f "${PACKAGE_VERSION}-screenshot.png" ]]; then
            mv "${PACKAGE_VERSION}-screenshot.png" screenshot.png
            IMAGE_JSON=',"image": {"url": "attachment://screenshot.png"}'
          fi
          if [[ -z ${COMMIT_MESSAGE} ]]; then
            COMMIT_MESSAGE="---"
          fi
          json='{
            '${MENTION}'
            "embeds": [
              {
                "title": "'${GITHUB_REPOSITORY}':'${TAG}${BRANCH}'",
                "url": "https://github.com/'${GITHUB_REPOSITORY}'/actions/runs/'${GITHUB_RUN_ID}'",
                "color": '${COLOR:-15158332}',
                "fields": [
                  {
                    "name": "Commit Message",
                    "value": "```'${COMMIT_MESSAGE//\"/\\\"}'```"
                  },
                  {
                    "name": "Artifact",
                    "value": "'${ARTIFACT_URL:----}'"
                  },
                  {
                    "name": "Commit SHA",
                    "value": "['${GITHUB_SHA:0:7}'](https://github.com/'${GITHUB_REPOSITORY}'/commit/'${GITHUB_SHA}')",
                    "inline": true
                  },
                  {
                    "name": "Version",
                    "value": "'${VERSION:----}'",
                    "inline": true
                  }
                ],
                "footer": {
                  "text": "Powered by GitHub Actions"
                },
                "timestamp": "'$(date -u +'%FT%T.%3NZ')'"'"${IMAGE_JSON}"'
              }
            ]
          }'
          if [[ -f "screenshot.png" ]]; then
            curl -fsSL --retry 5 -H "Content-Type: multipart/form-data" -F "file=@screenshot.png" -F "payload_json=${json}" "${DISCORD_WEBHOOK}" > /dev/null
          else
            curl -fsSL --retry 5 -H "Content-Type: multipart/form-data" -F "payload_json=${json}" "${DISCORD_WEBHOOK}" > /dev/null
          fi
